const socket = io();
const currentUser = '<%= user._id %>'; 
let selectedUser = null;
let users = {};
let selectedUserName = '';

// Load chat history when the page loads
window.addEventListener('load', () => {
    const urlParams = new URLSearchParams(window.location.search);
    const userId = urlParams.get('user');
    
    if (userId) {
        selectUser(userId);
    }
});

// Socket event listeners
socket.on('chat message', (data) => {
    console.log("Message Received:", data);
    if (
        (data.from === currentUser && data.to === selectedUser) ||
        (data.from === selectedUser && data.to === currentUser)
    ) {
        appendMessage(data, false); 
    }
});

socket.on('users update', (updatedUsers) => {
  users = updatedUsers;
  updateUsersList();
});

socket.on('message update', (data) => {
  const messageElement = document.querySelector(`[data-message-id="${data.messageId}"]`);
  if (messageElement) {
    const messageText = messageElement.querySelector('.message-text');
    messageText.textContent = data.newMessage;
    if (data.isEdited && !messageElement.querySelector('.edited-tag')) {
      const editedTag = document.createElement('span');
      editedTag.className = 'edited-tag text-xs opacity-70';
      editedTag.textContent = '(edited)';
      messageText.parentNode.appendChild(editedTag);
    }
  }
});

socket.on('message delete', (data) => {
  const messageElement = document.querySelector(`[data-message-id="${data.messageId}"]`);
  if (messageElement) {
    messageElement.remove();
  }
});

// Join chat when connected
socket.emit('join chat', { userId: currentUser });

// Update users list in UI
function updateUsersList() {
  const usersList = document.getElementById('usersList');
  usersList.innerHTML = '';

  Object.values(users).forEach(user => {
    if (user.userId !== currentUser) {
      const userElement = document.createElement('div');
      userElement.className = `p-4 border-b hover:bg-gray-50 cursor-pointer ${
        selectedUser === user.userId ? 'bg-blue-50' : ''
      }`;
      userElement.innerHTML = ` 
        <div class="flex items-center gap-3">
          <div class="w-2 h-2 rounded-full ${user.online ? 'bg-green-500' : 'bg-gray-300'}"></div>
          <span>${user.username}</span>
        </div>`;
      userElement.onclick = () => selectUser(user.userId);
      usersList.appendChild(userElement);
    }
  });
}

// Select user and load chat history
async function selectUser(userId) {
  selectedUser = userId;

  // Find the selected user's name
  const selectedUserData = users.find(user => user.userId === userId);
  selectedUserName = selectedUserData ? selectedUserData.username : 'Unknown User';
  updateChatHeader(); 

  updateUsersList(); 

  const newUrl = new URL(window.location);
  newUrl.searchParams.set('user', userId);
  window.history.pushState({}, '', newUrl);

  const messagesContainer = document.getElementById('messages');
  messagesContainer.innerHTML = ''; 
  await loadChatHistory(userId);
}


async function loadChatHistory(userId) {
    try {
        const response = await fetch(`/api/chat/history/${userId}`); 
        if (!response.ok) {
          throw new Error(`Failed to fetch chat history: ${response.statusText}`);
        }
    
        const messages = await response.json();
        messages.forEach(message => {
          appendMessage(message);
        });
      } catch (error) {
        console.error('Error loading chat history:', error);
      }
}

// Append message to chat window
function appendMessage(data, isNewMessage = true) {
    const messagesContainer = document.getElementById('messages');
    const messageDiv = document.createElement('div');
    const isOwnMessage = data.from === currentUser;
  
    messageDiv.setAttribute('data-message-id', data._id);
    messageDiv.className = `message-container flex ${isOwnMessage ? 'justify-end' : 'justify-start'} mb-2`;
    messageDiv.innerHTML = `
      <div class="max-w-[70%] relative p-3 rounded-lg ${
        isOwnMessage ? 'bg-blue-500 text-white' : 'bg-gray-200'
      }">
        <span class="message-text">${data.message}</span>
        ${data.isEdited ? '<span class="edited-tag text-xs opacity-70">(edited)</span>' : ''}
        ${isOwnMessage ? `
          <div class="message-actions absolute top-1 right-2">
            <button onclick="editMessage('${data._id}')" class="edit-btn text-gray-200 hover:text-white text-sm mr-2"> 
              <i class="fas fa-edit"></i> 
            </button>
            <button onclick="deleteMessage('${data._id}')" class="delete-btn text-red-500 hover:text-red-700 text-sm">
              <i class="fas fa-trash"></i> 
            </button>
          </div>
        ` : ''}
      </div>
    `;
  
    messagesContainer.appendChild(messageDiv);
    if (isNewMessage) { 
      messagesContainer.scrollTop = messagesContainer.scrollHeight; 
    }
  }
  

function editMessage(messageId) {
  const messageElement = document.querySelector(`[data-message-id="${messageId}"]`);
  const messageText = messageElement.querySelector('.message-text');
  const currentText = messageText.textContent;

  const input = document.createElement('input');
  input.type = 'text';
  input.value = currentText;
  input.className = 'border rounded px-2 py-1 text-black w-full';

  const saveButton = document.createElement('button');
  saveButton.textContent = 'Save';
  saveButton.className = 'ml-2 px-3 py-1 bg-green-500 text-white rounded text-sm';

  const cancelButton = document.createElement('button');
  cancelButton.textContent = 'Cancel';
  cancelButton.className = 'ml-2 px-3 py-1 bg-gray-500 text-white rounded text-sm';

  const editContainer = document.createElement('div');
  editContainer.className = 'flex items-center';
  editContainer.appendChild(input);
  editContainer.appendChild(saveButton);
  editContainer.appendChild(cancelButton);

  messageText.replaceWith(editContainer);
  input.focus(); 

  saveButton.onclick = async () => {
    const newMessage = input.value.trim();
    if (newMessage && newMessage !== currentText) {
      try {
        const response = await fetch(`/api/chat/message/${messageId}`, { 
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ message: newMessage })
        });

        if (!response.ok) {
          throw new Error('Failed to update message');
        }

        socket.emit('message update', { messageId, newMessage }); 

        messageText.textContent = newMessage;
        editContainer.replaceWith(messageText);
      } catch (error) {
        console.error('Error updating message:', error);
      }
    } else { 
      editContainer.replaceWith(messageText);
    }
  };

  cancelButton.onclick = () => {
    editContainer.replaceWith(messageText);
  };
}

async function deleteMessage(messageId) {
  if (confirm('Are you sure you want to delete this message?')) {
    try {
      const response = await fetch(`/api/chat/message/${messageId}`, {
        method: 'DELETE'
      });

      if (!response.ok) {
        throw new Error(`Failed to delete message: ${response.statusText}`);
      }

      socket.emit('message delete', { messageId });
    } catch (error) {
      console.error('Error deleting message:', error);
    }
  }
}


function updateChatHeader() {
  const chatHeader = document.getElementById('chatHeader');
  chatHeader.innerHTML = `
    <h2 class="text-xl font-bold">Chat with ${selectedUserName}</h2>
  `; 
}

// Message form submission
document.getElementById('messageForm').onsubmit = async function(e) {
    e.preventDefault();
    const input = document.getElementById('messageInput');
    const message = input.value.trim();

    if (message && selectedUser) {
        const messageData = {
            from: currentUser,
            to: selectedUser, 
            message: message
        };

        input.value = '';

        try {
            socket.emit('chat message', messageData);
        } catch (error) {
            console.error('Error sending message:', error);
            input.value = message; 
        }
    }
};
